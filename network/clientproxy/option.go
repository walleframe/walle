// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n ProxyOption -o option.go"
// Version: 0.0.2

package clientproxy

import (
	time "time"

	balancer "github.com/walleframe/walle/network/balancer"
	discovery "github.com/walleframe/walle/network/discovery"
	zaplog "github.com/walleframe/walle/zaplog"
)

var _ = walleClientProxy()

type ProxyOptions struct {
	// NewEntry create custom entry for discovery new entry
	NewClient NewClientFunc
	// DiscoveryOptions custom discovery options
	DiscoveryOptions []discovery.DiscoveryOption
	// NewDiscovery create discovery
	NewDiscovery NewDiscoveryFunc
	// BalancerName specify default balancer. empty means use server set value.
	PickerBuilder balancer.PickerBuilder
	// AsyncLink client async link server
	AsyncLink bool
	// UpdateBalanceAfterLink Whether the link must have been established before notifying the balancer
	UpdateBalanceAfterLink bool
	// LinkMode immediately or delay link
	LinkMode LinkMode
	// UseAfterAllLink the first initialization must be fully linked before it can be used
	UseAftreAllLink bool
	// LinkInterval
	LinkInterval time.Duration
	// frame log
	FrameLogger (*zaplog.Logger)
}

// NewEntry create custom entry for discovery new entry
func WithNewClient(v NewClientFunc) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.NewClient
		cc.NewClient = v
		return WithNewClient(previous)
	}
}

// DiscoveryOptions custom discovery options
func WithDiscoveryOptions(v ...discovery.DiscoveryOption) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.DiscoveryOptions
		cc.DiscoveryOptions = v
		return WithDiscoveryOptions(previous...)
	}
}

// NewDiscovery create discovery
func WithNewDiscovery(v NewDiscoveryFunc) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.NewDiscovery
		cc.NewDiscovery = v
		return WithNewDiscovery(previous)
	}
}

// BalancerName specify default balancer. empty means use server set value.
func WithPickerBuilder(v balancer.PickerBuilder) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.PickerBuilder
		cc.PickerBuilder = v
		return WithPickerBuilder(previous)
	}
}

// AsyncLink client async link server
func WithAsyncLink(v bool) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.AsyncLink
		cc.AsyncLink = v
		return WithAsyncLink(previous)
	}
}

// UpdateBalanceAfterLink Whether the link must have been established before notifying the balancer
func WithUpdateBalanceAfterLink(v bool) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.UpdateBalanceAfterLink
		cc.UpdateBalanceAfterLink = v
		return WithUpdateBalanceAfterLink(previous)
	}
}

// LinkMode immediately or delay link
func WithLinkMode(v LinkMode) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.LinkMode
		cc.LinkMode = v
		return WithLinkMode(previous)
	}
}

// UseAfterAllLink the first initialization must be fully linked before it can be used
func WithUseAftreAllLink(v bool) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.UseAftreAllLink
		cc.UseAftreAllLink = v
		return WithUseAftreAllLink(previous)
	}
}

// LinkInterval
func WithLinkInterval(v time.Duration) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.LinkInterval
		cc.LinkInterval = v
		return WithLinkInterval(previous)
	}
}

// frame log
func WithFrameLogger(v *zaplog.Logger) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.FrameLogger
		cc.FrameLogger = v
		return WithFrameLogger(previous)
	}
}

// SetOption modify options
func (cc *ProxyOptions) SetOption(opt ProxyOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *ProxyOptions) ApplyOption(opts ...ProxyOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *ProxyOptions) GetSetOption(opt ProxyOption) ProxyOption {
	return opt(cc)
}

// ProxyOption option define
type ProxyOption func(cc *ProxyOptions) ProxyOption

// NewProxyOptions create options instance.
func NewProxyOptions(opts ...ProxyOption) *ProxyOptions {
	cc := newDefaultProxyOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogProxyOptions != nil {
		watchDogProxyOptions(cc)
	}
	return cc
}

// InstallProxyOptionsWatchDog install watch dog
func InstallProxyOptionsWatchDog(dog func(cc *ProxyOptions)) {
	watchDogProxyOptions = dog
}

var watchDogProxyOptions func(cc *ProxyOptions)

// newDefaultProxyOptions new option with default value
func newDefaultProxyOptions() *ProxyOptions {
	cc := &ProxyOptions{
		NewClient:              nil,
		DiscoveryOptions:       nil,
		NewDiscovery:           discovery.NewDiscovery,
		PickerBuilder:          nil,
		AsyncLink:              false,
		UpdateBalanceAfterLink: true,
		LinkMode:               LinkModeImmediately,
		UseAftreAllLink:        true,
		LinkInterval:           time.Second,
		FrameLogger:            zaplog.GetFrameLogger(),
	}
	return cc
}
