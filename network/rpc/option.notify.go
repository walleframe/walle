// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n NoticeOption -f Notice -o option.notify.go"
// Version: 0.0.2

package rpc

import (
	time "time"

	metadata "github.com/aggronmagi/walle/process/metadata"
)

var _ = walleNoticeCallOption()

// NoticeOption oneway rpc
type NoticeOptions struct {
	// send message timeout
	Timeout time.Duration
	// metadata
	Metadata metadata.MD
}

// send message timeout
func WithNoticeOptionsTimeout(v time.Duration) NoticeOption {
	return func(cc *NoticeOptions) NoticeOption {
		previous := cc.Timeout
		cc.Timeout = v
		return WithNoticeOptionsTimeout(previous)
	}
}

// metadata
func WithNoticeOptionsMetadata(v metadata.MD) NoticeOption {
	return func(cc *NoticeOptions) NoticeOption {
		previous := cc.Metadata
		cc.Metadata = v
		return WithNoticeOptionsMetadata(previous)
	}
}

// SetOption modify options
func (cc *NoticeOptions) SetOption(opt NoticeOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *NoticeOptions) ApplyOption(opts ...NoticeOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *NoticeOptions) GetSetOption(opt NoticeOption) NoticeOption {
	return opt(cc)
}

// NoticeOption option define
type NoticeOption func(cc *NoticeOptions) NoticeOption

// NewNoticeOptions create options instance.
func NewNoticeOptions(opts ...NoticeOption) *NoticeOptions {
	cc := newDefaultNoticeOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogNoticeOptions != nil {
		watchDogNoticeOptions(cc)
	}
	return cc
}

// InstallNoticeOptionsWatchDog install watch dog
func InstallNoticeOptionsWatchDog(dog func(cc *NoticeOptions)) {
	watchDogNoticeOptions = dog
}

var watchDogNoticeOptions func(cc *NoticeOptions)

// newDefaultNoticeOptions new option with default value
func newDefaultNoticeOptions() *NoticeOptions {
	cc := &NoticeOptions{
		Timeout:  0,
		Metadata: nil,
	}
	return cc
}
