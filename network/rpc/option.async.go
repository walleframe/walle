// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n AsyncCallOption -f Async -o option.async.go"
// Version: 0.0.2

package rpc

import (
	time "time"

	process "github.com/walleframe/walle/process"
	metadata "github.com/walleframe/walle/process/metadata"
)

var _ = walleAsyncCallOption()

// CallOption rpc call options
type AsyncCallOptions struct {
	// rpc call timeout
	Timeout time.Duration
	// metadata
	Metadata metadata.MD
	// response filter. NOTE: req only valid in Filter func.
	ResponseFilter AsyncResponseFilter
	WaitFilter     func(await func())
}

// rpc call timeout
func WithAsyncCallOptionsTimeout(v time.Duration) AsyncCallOption {
	return func(cc *AsyncCallOptions) AsyncCallOption {
		previous := cc.Timeout
		cc.Timeout = v
		return WithAsyncCallOptionsTimeout(previous)
	}
}

// metadata
func WithAsyncCallOptionsMetadata(v metadata.MD) AsyncCallOption {
	return func(cc *AsyncCallOptions) AsyncCallOption {
		previous := cc.Metadata
		cc.Metadata = v
		return WithAsyncCallOptionsMetadata(previous)
	}
}

// response filter. NOTE: req only valid in Filter func.
func WithAsyncCallOptionsResponseFilter(v AsyncResponseFilter) AsyncCallOption {
	return func(cc *AsyncCallOptions) AsyncCallOption {
		previous := cc.ResponseFilter
		cc.ResponseFilter = v
		return WithAsyncCallOptionsResponseFilter(previous)
	}
}
func WithAsyncCallOptionsWaitFilter(v func(await func())) AsyncCallOption {
	return func(cc *AsyncCallOptions) AsyncCallOption {
		previous := cc.WaitFilter
		cc.WaitFilter = v
		return WithAsyncCallOptionsWaitFilter(previous)
	}
}

// SetOption modify options
func (cc *AsyncCallOptions) SetOption(opt AsyncCallOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *AsyncCallOptions) ApplyOption(opts ...AsyncCallOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *AsyncCallOptions) GetSetOption(opt AsyncCallOption) AsyncCallOption {
	return opt(cc)
}

// AsyncCallOption option define
type AsyncCallOption func(cc *AsyncCallOptions) AsyncCallOption

// NewAsyncCallOptions create options instance.
func NewAsyncCallOptions(opts ...AsyncCallOption) *AsyncCallOptions {
	cc := newDefaultAsyncCallOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogAsyncCallOptions != nil {
		watchDogAsyncCallOptions(cc)
	}
	return cc
}

// InstallAsyncCallOptionsWatchDog install watch dog
func InstallAsyncCallOptionsWatchDog(dog func(cc *AsyncCallOptions)) {
	watchDogAsyncCallOptions = dog
}

var watchDogAsyncCallOptions func(cc *AsyncCallOptions)

// newDefaultAsyncCallOptions new option with default value
func newDefaultAsyncCallOptions() *AsyncCallOptions {
	cc := &AsyncCallOptions{
		Timeout:  0,
		Metadata: nil,
		ResponseFilter: func(ctx process.Context, req, rsp interface{}) {
			ctx.Next(ctx)
		},
		WaitFilter: func(await func()) {
			go await()
		},
	}
	return cc
}
