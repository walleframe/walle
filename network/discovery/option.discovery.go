// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n DiscoveryOption -f Discovery -o option.discovery.go"
// Version: 0.0.3

package discovery

import (
	kvstore "github.com/walleframe/walle/kvstore"
	zaplog "github.com/walleframe/walle/zaplog"
)

var _ = walleDiscovery()

type DiscoveryOptions struct {
	// NewEntry create custom entry for discovery new entry
	NewEntry func() Entry
	// Codec use for decode entry.
	Codec EntryCodec
	// Store use for discover entries
	Store kvstore.Store
	// frame log
	FrameLogger *zaplog.Logger
}

// NewEntry create custom entry for discovery new entry
func WithDiscoveryOptionNewEntry(v func() Entry) DiscoveryOption {
	return func(cc *DiscoveryOptions) DiscoveryOption {
		previous := cc.NewEntry
		cc.NewEntry = v
		return WithDiscoveryOptionNewEntry(previous)
	}
}

// Codec use for decode entry.
func WithDiscoveryOptionCodec(v EntryCodec) DiscoveryOption {
	return func(cc *DiscoveryOptions) DiscoveryOption {
		previous := cc.Codec
		cc.Codec = v
		return WithDiscoveryOptionCodec(previous)
	}
}

// Store use for discover entries
func WithDiscoveryOptionStore(v kvstore.Store) DiscoveryOption {
	return func(cc *DiscoveryOptions) DiscoveryOption {
		previous := cc.Store
		cc.Store = v
		return WithDiscoveryOptionStore(previous)
	}
}

// frame log
func WithDiscoveryOptionFrameLogger(v *zaplog.Logger) DiscoveryOption {
	return func(cc *DiscoveryOptions) DiscoveryOption {
		previous := cc.FrameLogger
		cc.FrameLogger = v
		return WithDiscoveryOptionFrameLogger(previous)
	}
}

// SetOption modify options
func (cc *DiscoveryOptions) SetOption(opt DiscoveryOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *DiscoveryOptions) ApplyOption(opts ...DiscoveryOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *DiscoveryOptions) GetSetOption(opt DiscoveryOption) DiscoveryOption {
	return opt(cc)
}

// DiscoveryOption option define
type DiscoveryOption func(cc *DiscoveryOptions) DiscoveryOption

// NewDiscoveryOptions create options instance.
func NewDiscoveryOptions(opts ...DiscoveryOption) *DiscoveryOptions {
	cc := newDefaultDiscoveryOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogDiscoveryOptions != nil {
		watchDogDiscoveryOptions(cc)
	}
	return cc
}

// InstallDiscoveryOptionsWatchDog install watch dog
func InstallDiscoveryOptionsWatchDog(dog func(cc *DiscoveryOptions)) {
	watchDogDiscoveryOptions = dog
}

var watchDogDiscoveryOptions func(cc *DiscoveryOptions)

// newDefaultDiscoveryOptions new option with default value
func newDefaultDiscoveryOptions() *DiscoveryOptions {
	cc := &DiscoveryOptions{
		NewEntry: func() Entry {
			return &Node{}
		},
		Codec:       NodeJsonEntryCodec,
		Store:       nil,
		FrameLogger: zaplog.GetFrameLogger(),
	}
	return cc
}
