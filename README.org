#+startup: showall
#+title: walle

walle目标灵活配置. 高性能的服务框架.开发中...
#+begin_quote
开发阶段，API并不稳定
#+end_quote

* 开发依赖工具
 - protoc 需要手动安装
#+begin_src shell
# mock接口生成
go install github.com/golang/mock/mockgen@v1.6.0
# 代码生成(option,string,struct => interface)
go install github.com/aggronmagi/gogen@latest
# protobuf 生成go代码 使用gogofaster
# go install github.com/golang/protobuf/protoc-gen-go@latest
go install github.com/gogo/protobuf/protoc-gen-gogofaster@latest
# walle 命令行工具(解析wproto,excel等)
go install github.com/aggronmagi/wctl@latest
# wctl插件 wproto => protobuf 格式转换
go install github.com/aggronmagi/wplugins/cmd/toproto@latest
# wctl插件 生成rpc代码
go install github.com/aggronmagi/wplugins/cmd/wrpc@lates
# wctl插件 为pb结构体生成zap日志文件
go install github.com/aggronmagi/wplugins/cmd/wzap@latest
# wctl插件 redis代码
# wctl插件 mysql代码
# wctl插件 excel代码
# wctl插件 项目代码
#+end_src
* 进度
** DONE 网络层支持以下接口
 - [X] gotcp
 - [X] gnet
 - [X] kcp
 - [X] websocket
** DONE 分布式
 - [X] kvstore（参考libkv接口）
 - [X] 服务注册发现
 - [X] ClientProxy
** TODO 工具代码包
 - [ ] gpool
 - [ ] skeleton
** TODO 代码生成
 - [ ] excel配置相关
 - [ ] rpc、tcp代码
 - [ ] redis/mysql 代码
** TODO 优化
 - [X] 客户端链接允许不直接建立链接
 - [ ] packet包 独立，不直接使用pb消息（兼容其他格式，比如sproto）
** TODO 需要调整
TCPServer等，应该提供注册接口，而不是让外部直接去设置Router，每种设置，提供全局的默认值修改机制。
* 代码约定
* 组件替换
** Codec接口约定
*所有Codec接口Marshal返回的内存，都应该是mempool.Pool()中申请的。*

此约定主要想减少内存拷贝。

~metadata~ 的 ~Codec.Marshal~ 申请的内存，在函数调用处进行Free.
~message~ 的 ~Codec.Marshal~ 申请的内存，在 ~packet.Pool.Put~ 处释放。
~packet~ 的 ~Codec.Marshal~ 申请的内存，在 ~packet.Pool.Put~ 处释放。
~errcode~ 的 ~Codec.Marshal~ 申请的内存，和 ~message~ 一样。
** 错误
packege ~errcode~ 用于定义框架中使用的错误结构体。

 ~ErrorResponse~ 不仅仅用于进程内表示错误，还用于网络请求中传递错误。

可以通过实现 ~ErrorCodec~ ， ~ErrorsNew~ 接口来替换内部错误的实现.
实现之后替换 ~DefaultErrorCodec~ 及 ~DefaultErrorsNew~ 即可。
这两个接口都是全局的。
** 网络包 packet
#+begin_src go
// Pool reuse packet pool
type Pool interface {
	Get() interface{}
	Put(interface{})
}

// Codec Use for marshal/unmarshal packet.Packet from bytes
type Codec interface {
	Marshal(p interface{}) ([]byte, error)
	Unmarshal(data []byte, p interface{}) error
}

// ProtocolWraper wrap all packet operate, use for custom packet struct.
type ProtocolWraper interface {
	// unmarshal packet's payload by msg codec
	PayloadUnmarshal(pkg interface{}, codec message.Codec, obj interface{}) error
	// marshal packet's payload by msg codec,then set payload binary data into message buf.
	PayloadMarshal(pkg interface{}, codec message.Codec, payload interface{}) (err error)
	// new response packet
	NewResponse(inPkg, outPkg interface{}, md metadata.MD) (err error)
	// new request packet
	NewPacket(inPkg interface{}, cmd PacketCmd, uri interface{}, md metadata.MD) (err error)
}
#+end_src

* 网络层
[[./doc/network.org][网络层详细文档]]

网络层:
 1. 底层接口. io层，只提供系统层级交互. read/write
 2. 中层接口. process层，定制处理流程. 已完成
 3. 高层接口. 业务逻辑层.
    手写代码,后续会分为2层. 
    1. 生成代码层
    2. 自定义逻辑层
[[./doc/img/network.png]]

Process层:
[[./doc/img/process.png]]

* 源码目录
#+begin_example
.
├── app              - 应用程序封装。确保启动顺序与正确退出
├── example          - 代码示例
├── internal
│   └── util
│       └── test     - 用于测试函数调用顺序，调用参数等。
├── net
│   ├── iface        - 网络接口定义
│   ├── packet       - 网络底层包定义
│   ├── process      - process层处理封装
│   ├── discovery    - 服务注册发现
│   ├── clientproxy  - 客户端代理实现。
│   ├── gnet         - gnet封装
│   ├── gotcp        - net/tcp 包封装
│   ├── kcp          - kcp 封装（实际只是gotcp包参数封装）
│   └── ws           - websocket封装 
├── util             - 辅助工具代码
│   └── rtimer       - tars timewheel 代码
├── kvstore          - kv接口封装
│   └── etcd         - etcd kv接口封装
└── zaplog           - 日志封装
#+end_example
