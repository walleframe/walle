// Code generated by "gogen imake"; DO NOT EDIT.
// Exec: "gogen imake . -t=WrapContext -r WrapContext=Context -o context.gen.go --merge"
// Version: 0.0.7

package process

import (
	context "context"
	time "time"

	metadata "github.com/aggronmagi/walle/process/metadata"
	zaplog "github.com/aggronmagi/walle/zaplog"
	zap "go.uber.org/zap"
)

// Context 基础
type Context interface {
	// WithValue wrap context.WithValue
	WithValue(key, value interface{}) Context
	// WithValue wrap context.WithCancel
	WithCancel() (_ Context, cancel func())
	// WithValue wrap context.WithDeadline
	WithDeadline(d time.Time) (_ Context, cancel func())
	// WithValue wrap context.WithTimeout
	WithTimeout(timeout time.Duration) (_ Context, cancel func())
	// Deadline wrap context.Context.Deadline
	Deadline() (deadline time.Time, ok bool)
	// Done wrap context.Context.Done
	Done() <-chan struct{}
	// Err wrap context.Context.Err
	Err() error
	// Value wrap context.Context.Value
	Value(key interface{}) interface{}
	// GetRequestPacket get request packet
	GetRequestPacket() interface{}
	// GetReqeustMD get request metadata
	GetReqeustMD() (metadata.MD, error)
	// Bind use for unmarshal packet body
	Bind(body interface{}) (err error)
	// Respond write response.
	Respond(_ context.Context, body interface{}, md metadata.MD) (err error)
	// Next call next middleware or router func
	Next(nctx Context)
	// Abort stop call next
	Abort()
	// Logger get logger
	Logger() *zaplog.Logger
	// WithLogFields
	WithLogFields(fields ...zap.Field)
	// NewEntry new log entry
	NewEntry(funcName string) *zaplog.LogEntities
}
