// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n ProcessOption -o option.process.go"
// Version: 0.0.3

package process

import (
	message "github.com/walleframe/walle/process/message"
	packet "github.com/walleframe/walle/process/packet"
	zaplog "github.com/walleframe/walle/zaplog"
)

var _ = walleProcessOption()

// ProcessOption process option
type ProcessOptions struct {
	// log interface
	Logger *zaplog.Logger
	// frame log
	FrameLogger *zaplog.Logger
	// packet pool
	PacketPool packet.Pool
	// packet wraper
	PacketWraper packet.ProtocolWraper
	// packet encoder
	PacketEncode packet.Encoder
	// packet codec
	PacketCodec packet.Codec
	// message codec
	MsgCodec message.Codec
	// dispatch packet data filter
	DispatchDataFilter DataDispatcherFilter
	// dispatch packet struct filter
	DispatchPacketFilter PacketDispatcherFilter
	// load limit. return true to ignore packet.
	LoadLimitFilter func(req interface{}, count AtomicNumber) bool
}

// log interface
func WithLogger(v *zaplog.Logger) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.Logger
		cc.Logger = v
		return WithLogger(previous)
	}
}

// frame log
func WithFrameLogger(v *zaplog.Logger) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.FrameLogger
		cc.FrameLogger = v
		return WithFrameLogger(previous)
	}
}

// packet pool
func WithPacketPool(v packet.Pool) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.PacketPool
		cc.PacketPool = v
		return WithPacketPool(previous)
	}
}

// packet wraper
func WithPacketWraper(v packet.ProtocolWraper) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.PacketWraper
		cc.PacketWraper = v
		return WithPacketWraper(previous)
	}
}

// packet encoder
func WithPacketEncode(v packet.Encoder) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.PacketEncode
		cc.PacketEncode = v
		return WithPacketEncode(previous)
	}
}

// packet codec
func WithPacketCodec(v packet.Codec) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.PacketCodec
		cc.PacketCodec = v
		return WithPacketCodec(previous)
	}
}

// message codec
func WithMsgCodec(v message.Codec) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.MsgCodec
		cc.MsgCodec = v
		return WithMsgCodec(previous)
	}
}

// dispatch packet data filter
func WithDispatchDataFilter(v DataDispatcherFilter) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.DispatchDataFilter
		cc.DispatchDataFilter = v
		return WithDispatchDataFilter(previous)
	}
}

// dispatch packet struct filter
func WithDispatchPacketFilter(v PacketDispatcherFilter) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.DispatchPacketFilter
		cc.DispatchPacketFilter = v
		return WithDispatchPacketFilter(previous)
	}
}

// load limit. return true to ignore packet.
func WithLoadLimitFilter(v func(req interface{}, count AtomicNumber) bool) ProcessOption {
	return func(cc *ProcessOptions) ProcessOption {
		previous := cc.LoadLimitFilter
		cc.LoadLimitFilter = v
		return WithLoadLimitFilter(previous)
	}
}

// SetOption modify options
func (cc *ProcessOptions) SetOption(opt ProcessOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *ProcessOptions) ApplyOption(opts ...ProcessOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *ProcessOptions) GetSetOption(opt ProcessOption) ProcessOption {
	return opt(cc)
}

// ProcessOption option define
type ProcessOption func(cc *ProcessOptions) ProcessOption

// NewProcessOptions create options instance.
func NewProcessOptions(opts ...ProcessOption) *ProcessOptions {
	cc := newDefaultProcessOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogProcessOptions != nil {
		watchDogProcessOptions(cc)
	}
	return cc
}

// InstallProcessOptionsWatchDog install watch dog
func InstallProcessOptionsWatchDog(dog func(cc *ProcessOptions)) {
	watchDogProcessOptions = dog
}

var watchDogProcessOptions func(cc *ProcessOptions)

// newDefaultProcessOptions new option with default value
func newDefaultProcessOptions() *ProcessOptions {
	cc := &ProcessOptions{
		Logger:               zaplog.GetLogicLogger(),
		FrameLogger:          zaplog.GetFrameLogger(),
		PacketPool:           packet.GetPool(),
		PacketWraper:         packet.GetProtocolWraper(),
		PacketEncode:         packet.GetEncoder(),
		PacketCodec:          packet.GetCodec(),
		MsgCodec:             message.WalleCodec,
		DispatchDataFilter:   DefaultDataFilter,
		DispatchPacketFilter: DefaultPacketFilter,
		LoadLimitFilter: func(req interface{}, count AtomicNumber) bool {
			return false
		},
	}
	return cc
}
