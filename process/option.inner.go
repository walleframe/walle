// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n InnerOption -f Inner -o option.inner.go"
// Version: 0.0.2

package process

import (
	context "context"
	io "io"

	atomic "go.uber.org/atomic"
)

var _ = walleProcessInner()

// InnerOption use for process
type InnerOptions struct {
	// Output: write interface(net.Conn)
	Output io.Writer
	// Specify Real Context
	ContextPool ContextPool
	// process context parent
	ParentCtx context.Context
	// Sequence number
	Sequence AtomicNumber
	// load number interface
	Load AtomicNumber
	// bind data
	BindData interface{}
	// process router.
	Router Router
}

// Output: write interface(net.Conn)
func WithInnerOptionsOutput(v io.Writer) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.Output
		cc.Output = v
		return WithInnerOptionsOutput(previous)
	}
}

// Specify Real Context
func WithInnerOptionsContextPool(v ContextPool) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.ContextPool
		cc.ContextPool = v
		return WithInnerOptionsContextPool(previous)
	}
}

// process context parent
func WithInnerOptionsParentCtx(v context.Context) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.ParentCtx
		cc.ParentCtx = v
		return WithInnerOptionsParentCtx(previous)
	}
}

// Sequence number
func WithInnerOptionsSequence(v AtomicNumber) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.Sequence
		cc.Sequence = v
		return WithInnerOptionsSequence(previous)
	}
}

// load number interface
func WithInnerOptionsLoad(v AtomicNumber) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.Load
		cc.Load = v
		return WithInnerOptionsLoad(previous)
	}
}

// bind data
func WithInnerOptionsBindData(v interface{}) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.BindData
		cc.BindData = v
		return WithInnerOptionsBindData(previous)
	}
}

// process router.
func WithInnerOptionsRouter(v Router) InnerOption {
	return func(cc *InnerOptions) InnerOption {
		previous := cc.Router
		cc.Router = v
		return WithInnerOptionsRouter(previous)
	}
}

// SetOption modify options
func (cc *InnerOptions) SetOption(opt InnerOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *InnerOptions) ApplyOption(opts ...InnerOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *InnerOptions) GetSetOption(opt InnerOption) InnerOption {
	return opt(cc)
}

// InnerOption option define
type InnerOption func(cc *InnerOptions) InnerOption

// NewInnerOptions create options instance.
func NewInnerOptions(opts ...InnerOption) *InnerOptions {
	cc := newDefaultInnerOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogInnerOptions != nil {
		watchDogInnerOptions(cc)
	}
	return cc
}

// InstallInnerOptionsWatchDog install watch dog
func InstallInnerOptionsWatchDog(dog func(cc *InnerOptions)) {
	watchDogInnerOptions = dog
}

var watchDogInnerOptions func(cc *InnerOptions)

// newDefaultInnerOptions new option with default value
func newDefaultInnerOptions() *InnerOptions {
	cc := &InnerOptions{
		Output:      nil,
		ContextPool: WrapContextPool,
		ParentCtx:   context.Background(),
		Sequence:    &atomic.Int64{},
		Load:        &atomic.Int64{},
		BindData:    nil,
		Router:      GetRouter(),
	}
	return cc
}
