#+title: 网络层文档

* 网络库

网络层:
 1. 底层接口. io层，只提供系统层级交互. read/write
 2. 中层接口. process层，定制处理流程. 已完成
 3. 高层接口. 业务逻辑层.
    手写代码,后续会分为2层. 
    1. 生成代码层
    2. 自定义逻辑层
[[./doc/img/network.png]]

Process层:
[[./doc/img/process.png]]

** Codec接口约定
*所有Codec接口Marshal返回的内存，都应该是mempool.Pool()中申请的。*

此约定主要想减少内存拷贝。

~metadata~ 的 ~Codec.Marshal~ 申请的内存，在函数调用处进行Free.
~message~ 的 ~Codec.Marshal~ 申请的内存，在 ~packet.Pool.Put~ 处释放。
~packet~ 的 ~Codec.Marshal~ 申请的内存，在 ~packet.Pool.Put~ 处释放。
~errcode~ 的 ~Codec.Marshal~ 申请的内存，和 ~message~ 一样。
** 错误
packege ~errcode~ 用于定义框架中使用的错误结构体。

 ~ErrorResponse~ 不仅仅用于进程内表示错误，还用于网络请求中传递错误。

可以通过实现 ~ErrorCodec~ ， ~ErrorsNew~ 接口来替换内部错误的实现.
实现之后替换 ~DefaultErrorCodec~ 及 ~DefaultErrorsNew~ 即可。
这两个接口都是全局的。
** 网络包 packet
#+begin_src go
// Pool reuse packet pool
type Pool interface {
	Get() interface{}
	Put(interface{})
}

// Codec Use for marshal/unmarshal packet.Packet from bytes
type Codec interface {
	Marshal(p interface{}) ([]byte, error)
	Unmarshal(data []byte, p interface{}) error
}

// ProtocolWraper wrap all packet operate, use for custom packet struct.
type ProtocolWraper interface {
	// unmarshal packet's payload by msg codec
	PayloadUnmarshal(pkg interface{}, codec message.Codec, obj interface{}) error
	// marshal packet's payload by msg codec,then set payload binary data into message buf.
	PayloadMarshal(pkg interface{}, codec message.Codec, payload interface{}) (err error)
	// new response packet
	NewResponse(inPkg, outPkg interface{}, md metadata.MD) (err error)
	// new request packet
	NewPacket(inPkg interface{}, cmd PacketCmd, uri interface{}, md metadata.MD) (err error)
}
#+end_src

默认的 ~Codec~ 依赖wpb生成的代码。如使用gogo可以使用 ~message.ProtobufCodec~ 替换。使用google protobuf 请自行定义。

** 层级
 1. 底层接口. io层，只提供系统层级交互. read/write
 2. 中层接口. process层，定制处理流程. 已完成
 3. 高层接口. 业务逻辑层.
    手写代码,后续会分为2层. 
    1. 生成代码层
    2. 自定义逻辑层
*** io(transport)
io.Read io.Write 负责网络接口读写
**** 支持
 - 原生net/tcp
 - kcp https://github.com/xtaci/kcp-go
 - websocket https://github.com/gorilla/websocket/
 - gnet https://github.com/panjf2000/gnet
*** process -> 处理流程
**** network.Read
#+begin_example
io.Read ==>  PacketDispatcherFilter(Chain) => PacketCoder.Decode(Tee) => PacketCodec.Unmarshal => Router => CallChain(Middleware+LogicFunc)
#+end_example

**** network.Write
#+begin_example
MsgCodec.Marshal => PacketCodec.Marshal => PacketCoder.Encode => NetPackager.Write ==> io.Write
#+end_example

*** logic -> 逻辑处理(自定义生成/手写代码)
*** 网络包
| 4字节      | packet.Packet |
| 网络包大小 | 序列化数据    |

** 组件,接口
*** PacketDispatcherFilter 接口
PacketDispatcherFilter 用于控制之后的程序如何执行.可以在接收数据的时间开始就直接开始一个新的协程！
#+begin_src go
// PacketDispatcherFunc 消息分发 - 未解包
type PacketDispatcherFunc func(data []byte) (err error)
// PacketUnmarshalFilter
type PacketDispatcherFilter func(data []byte, next PacketDispatcherFunc) (err error)
#+end_src
*** PacketEncoder 接口
用于对原始数据包进行处理(加解密,压缩等)
#+begin_src go
type PacketEncoder interface {
	Encode(ctx Context, buf []byte) []byte
	Decode(ctx Context, buf []byte) []byte
}
#+end_src
*** PacketCodec 接口
用于序列化/反序列化 packet.Packet 消息
#+begin_src go
type PacketCodec interface {
	Marshal(p *packet.Packet) ([]byte, error)
	Unmarshal(data []byte, p *packet.Packet) error
}
#+end_src
*** MsgCodec 接口
用于序列化和反序列逻辑层网络消息 - ~ctx.Bind(Request)~ => ~Codec.Unmarshal()~
#+begin_src go
type Codec interface {
	Marshal(v interface{}) ([]byte, error)
	Unmarshal(data []byte, v interface{}) error
}
#+end_src
*** Router 接口
路由组件。当前支持string类型的name路由，和基于数字的路由。
*** CallChain
由中间件和逻辑处理函数组成的调用队列

可以定制的中间件及支持：
 - 监控中间件
 - 定制处理协程。可以将后续流程放入指定协程处理，或者放入协程池。
 - 可以调用 process.Context.WithTimeout 设置整体流程超时。

*** Context
不同场景. Context不同.
 - tcp-client / tcp-server-session
 - rpc-client / rpc-server-session 
 - kafka/redis-stream/redis-list/mq
必须包含的项:
  - log
  - context.Context
可选的项: 
    - Packet
    - Timer
    - Server & Session
    - Client
      
** process 选项
*** 定制选项，业务方决定如何配置
#+begin_src go
// ProcessOption process option
//go:generate gogen option -n ProcessOption -o option.process.go
func walleProcessOption() interface{} {
	return map[string]interface{}{
		// log interface。 日志接口，也可以通过 server层WithSessionLogger去定制
		"Logger": (*zaplog.Logger)(zaplog.Default),
		// packet pool。缓存池
		"PacketPool": packet.PacketPool(packet.DefaultPacketPool),
		// packet encoder 定制数据加密解密
		"PacketEncode": PacketEncoder(&EmtpyPacketCoder{}),
		// packet codec 定制如何解析Packet
		"PacketCodec": PacketCodec(PacketCodecProtobuf),
		// message codec 定制如何解析消息
		"MsgCodec": MessageCodec(MessageCodecProtobuf),
		// dispatch packet data filter 接收数据后，定制处理协程
		"DispatchDataFilter": PacketDispatcherFilter(DefaultPacketFilter),
		// load limit. return true to ignore packet. 负载限制。
		"LoadLimitFilter": func(ctx Context, count int64, req *packet.Packet) bool {
			return false
		},
	}
}

#+end_src
*** 内部选项。 用于封装server,client等操作。开发新的io支持。
#+begin_src go

// InnerOption use for process
//go:generate gogen option -n InnerOption -f Inner -o option.inner.go
func walleProcessInner() interface{} {
	return map[string]interface{}{
		// Output: write interface(net.Conn)
		"Output": io.Writer(nil),
		// Specify Real Context
		"NewContext": func(ctx Context, ud interface{}) Context {
			return ctx
		},
		// process context parent
		"ParentCtx": context.Context(context.Background()),
		// Sequence number 可以由创建方决定，是否每一个process独立计算Sequence
		"Sequence": AtomicNumber(&atomic.Int64{}),
		// load number interface。 同上。
		"Load": AtomicNumber(&atomic.Int64{}),
		// bind data 内部绑定数据
		"BindData": interface{}(nil),
		// process router. 路由。也是由创建方决定使用方式
		"Router": Router(nil),
	}
}
#+end_src
** 通用io层选项
 - AcceptLoadLimit 链接数量限制
 - Router 全局Router
 - Logger 全局日志
 - NewSession 用于定制、替换、或者封装 Session链接接口
 - SessionRouter，SessionLogger 定制每个链接的路由及日志接口。默认使用全局配置。
** websocket 选项 - io层
[[./example/ws][websocket例子]]
#+begin_src go
// ServerOption
//go:generate gogen option -n ServerOption -o option.server.go
func walleServer() interface{} {
	return map[string]interface{}{
		// Addr Server Addr. websocket监听地址
		"Addr": string(":8080"),
		// WsPath websocket server path。 路由
		"WsPath": string("/ws"),
		// Upgrade websocket upgrade
		"Upgrade": (*websocket.Upgrader)(DefaultUpgrade),
		// UpgradeFail upgrade fail notify.
		"UpgradeFail": func(w http.ResponseWriter, r *http.Request, reason error) {},
		// accepted load limit.链接数量限制
		"AcceptLoadLimit": func(sess Session, cnt int64) bool { return false },
		// Process Options 传递给process的选项。
		"ProcessOptions": []process.ProcessOption{},
		// process router。路由
		"Router": Router(nil),
		// SessionRouter custom session router。定制路由
		"SessionRouter": func(sess Session, global Router) (r Router) { return global },
		// log interface 日志接口
		"Logger": (*zaplog.Logger)(zaplog.Default),
		// SessionLogger custom session logger。定制日志接口
		"SessionLogger": func(sess Session, global *zaplog.Logger) (r *zaplog.Logger) { return global },
		// NewSession custom session。新链接通知
		"NewSession": func(in Session, r *http.Request) (Session, error) { return in, nil },
		// StopImmediately when session finish,business finish immediately.
		// 链接断开后，是否停止处理流程。 应该根据业务分析决定。
		"StopImmediately": false,
		// ReadTimeout read timetout
		"ReadTimeout": time.Duration(0),
		// WriteTimeout write timeout
		"WriteTimeout": time.Duration(0),
		// MaxMessageLimit limit message size
		"MaxMessageLimit": int(0),
		// Write network data method.
		"WriteMethods": WriteMethod(WriteAsync),
		// SendQueueSize async send queue size
		"SendQueueSize": int(1024),
		// Heartbeat use websocket ping/pong.
		"Heartbeat": time.Duration(0),
		// HttpServeMux custom set mux
		"HttpServeMux": (*http.ServeMux)(http.DefaultServeMux),
	}
}
#+end_src

** gnet选项 - io层
[[./example/gnet][gnet例子]]
gnet 当前客户端支持正在开发（dev分支，还有问题，暂时可以使用gotcp）

gnet层封装 支持大部分原始gnet包的配置（日志除外，之后会在walle日志修改时进行统一）

*** server 选项
#+begin_src go
// ServerOption
//go:generate gogen option -n ServerOption -o option.server.go
func walleServer() interface{} {
	return map[string]interface{}{
		// Addr Server Addr
		"Addr": string("tcp://0.0.0.0:8080"),
		// NetOption modify raw options
		"NetConnOption": func(net.Conn) {},
		// accepted load limit
		"AcceptLoadLimit": func(sess Session, cnt int64) bool { return false },
		// Process Options
		"ProcessOptions": []process.ProcessOption{},
		// process router
		"Router": Router(nil),
		// SessionRouter custom session router
		"SessionRouter": func(sess Session, global Router) (r Router) { return global },
		// log interface
		"Logger": (*zaplog.Logger)(zaplog.Default),
		// SessionLogger custom session logger
		"SessionLogger": func(sess Session, global *zaplog.Logger) (r *zaplog.Logger) { return global },
		// NewSession custom session
		"NewSession": func(in Session) (Session, error) { return in, nil },
		// StopImmediately when session finish,business finish immediately.
		"StopImmediately": false,
		// Heartbeat use websocket ping/pong.
		"Heartbeat": time.Duration(0),
		// WithMulticore sets up multi-cores in gnet server.
		"Multicore": false,
		// WithLockOSThread sets up LockOSThread mode for I/O event-loops.
		"LockOSThread": false,
		// WithLoadBalancing sets up the load-balancing algorithm in gnet server.
		"LoadBalancing": gnet.LoadBalancing(gnet.SourceAddrHash),
		// WithNumEventLoop sets up NumEventLoop in gnet server.
		"NumEventLoop": int(0),
		// WithReusePort sets up SO_REUSEPORT socket option.
		"ReusePort": false,
		// WithTCPKeepAlive sets up the SO_KEEPALIVE socket option with duration.
		"TCPKeepAlive": time.Duration(0),
		// WithTCPNoDelay enable/disable the TCP_NODELAY socket option.
		"TCPNoDelay": gnet.TCPSocketOpt(gnet.TCPNoDelay),
		// WithReadBufferCap sets up ReadBufferCap for reading bytes.
		"ReadBufferCap": int(0),
		// WithSocketRecvBuffer sets the maximum socket receive buffer in bytes.
		"SocketRecvBuffer": int(0),
		// WithSocketSendBuffer sets the maximum socket send buffer in bytes.
		"SocketSendBuffer": int(0),
		// WithTicker indicates that a ticker is set.
		"Ticker": time.Duration(0),
		// WithCodec sets up a codec to handle TCP stream.
		"Codec": gnet.ICodec(gnet.ICodec(DefaultGNetCodec)),
	}
}
#+end_src

** gotcp选项 - io层
[[./example/gotcp][gotcp例子]]
*** server
#+begin_src go
// ServerOption
//go:generate gogen option -n ServerOption -o option.server.go
func walleServer() interface{} {
	return map[string]interface{}{
		// Addr Server Addr
		"Addr": string(":8080"),
		// Listen option. can replace kcp wrap
		"Listen": func(addr string) (ln net.Listener, err error) {
			return net.Listen("tcp", addr)
		},
		// NetOption modify raw options
		"NetConnOption": func(net.Conn) {},
		// accepted load limit
		"AcceptLoadLimit": func(sess Session, cnt int64) bool { return false },
		// Process Options
		"ProcessOptions": []process.ProcessOption{},
		// process router
		"Router": Router(nil),
		// SessionRouter custom session router
		"SessionRouter": func(sess Session, global Router) (r Router) { return global },
		// log interface
		"Logger": (*zaplog.Logger)(zaplog.Default),
		// SessionLogger custom session logger
		"SessionLogger": func(sess Session, global *zaplog.Logger) (r *zaplog.Logger) { return global },
		// NewSession custom session
		"NewSession": func(in Session) (Session, error) { return in, nil },
		// StopImmediately when session finish,business finish immediately.
		"StopImmediately": false,
		// ReadTimeout read timetou
		"ReadTimeout": time.Duration(0),
		// WriteTimeout write timeout
		"WriteTimeout": time.Duration(0),
		// Write network data method.
		"WriteMethods": WriteMethod(WriteAsync),
		// SendQueueSize async send queue size
		"SendQueueSize": int(1024),
		// Heartbeat use websocket ping/pong.
		"Heartbeat": time.Duration(0),
		// tcp packet head
		"PacketHeadBuf": func() []byte {
			return make([]byte, 4)
		},
		// read tcp packet head size
		"ReadSize": func(head []byte) (size int) {
			size = int(binary.LittleEndian.Uint32(head))
			return
		},
		// write tcp packet head size
		"WriteSize": func(head []byte, size int) (err error) {
			if size >= math.MaxUint32 {
				return packet.ErrPacketTooLarge
			}
			binary.LittleEndian.PutUint32(head, uint32(size))
			return
		},
		// ReadBufferSize 一定要大于最大消息的大小.每个链接一个缓冲区。
		"ReadBufferSize": int(65535),
		// ReuseReadBuffer 复用read缓存区。影响Process.DispatchFilter.
		// 如果此选项设置为true，在DispatchFilter内如果开启协程，需要手动复制内存。
		// 如果在DispatchFilter内不开启协程，设置为true可以减少内存分配。
		// 默认为false,是为了防止错误的配置导致bug。
		"ReuseReadBuffer": false,
		// MaxMessageSizeLimit limit message size
		"MaxMessageSizeLimit": int(0),
	}
}
#+end_src

*** client
#+begin_src go

// ClientOption
//go:generate gogen option -n ClientOption -f Client -o option.client.go
func walleClient() interface{} {
	return map[string]interface{}{
		// Network tcp/tcp4/tcp6/unix
		"Network": "tcp",
		// Addr Server Addr
		"Addr": string("localhost:8080"),
		// Dialer config net dialer
		"Dialer": func(network, addr string) (conn net.Conn, err error) {
			return net.Dial(network, addr)
		},
		// Process Options
		"ProcessOptions": []process.ProcessOption{},
		// process router
		"Router": Router(nil),
		// log interface
		"Logger": (*zaplog.Logger)(zaplog.Default),
		// AutoReconnect auto reconnect server. zero means not reconnect!
		"AutoReconnectTime": int(5),
		// AutoReconnectWait reconnect wait time
		"AutoReconnectWait": time.Duration(time.Millisecond * 500),
		// StopImmediately when session finish,business finish immediately.
		"StopImmediately": false,
		// ReadTimeout read timeout
		"ReadTimeout": time.Duration(0),
		// WriteTimeout write timeout
		"WriteTimeout": time.Duration(0),
		// Write network data method.
		"WriteMethods": WriteMethod(WriteAsync),
		// SendQueueSize async send queue size
		"SendQueueSize": int(1024),
		// Heartbeat use websocket ping/pong.
		"Heartbeat": time.Duration(0),
		// tcp packet head
		"PacketHeadBuf": func() []byte {
			return make([]byte, 4)
		},
		// read tcp packet head size
		"ReadSize": func(head []byte) (size int) {
			size = int(binary.LittleEndian.Uint32(head))
			return
		},
		// write tcp packet head size
		"WriteSize": func(head []byte, size int) (err error) {
			if size >= math.MaxUint32 {
				return packet.ErrPacketTooLarge
			}
			binary.LittleEndian.PutUint32(head, uint32(size))
			return
		},
		// ReadBufferSize 一定要大于最大消息的大小.每个链接一个缓冲区。
		"ReadBufferSize": int(65535),
		// ReuseReadBuffer 复用read缓存区。影响Process.DispatchFilter.
		// 如果此选项设置为true，在DispatchFilter内如果开启协程，需要手动复制内存。
		// 如果在DispatchFilter内不开启协程，设置为true可以减少内存分配。
		// 默认为false,是为了防止错误的配置导致bug。
		"ReuseReadBuffer": false,
		// MaxMessageSizeLimit limit message size
		"MaxMessageSizeLimit": int(0),
	}
}

#+end_src

*** 定制辅助
**** 定制网络包
通过 PacketHeadBuf，ReadSize，WriteSize 选项，可以定制网络包

 - PacketHeadBuf 返回指定网络包头大小的[]byte
 - ReasSize 从指定长度的网络包头中读取数据负载长度。默认小端。
 - WriteSize 写入指定长度。同ReadSize
**** 读写超时
ReadTimeout,WriteTimeout
**** 读取缓冲区大小
ReadBufferSize 设置读取缓冲区大小，必须大于最大消息长度（MaxMessageSizeLimit）
ReuseReadBuffer 复用read缓存区。影响Process.DispatchFilter.
 - 如果此选项设置为true，在DispatchFilter内如果开启协程，需要手动复制内存。
 - 如果在DispatchFilter内不开启协程，设置为true可以减少内存分配。
 - 默认为false,是为了防止错误的配置导致bug。

建议设置 ReuseReadBuffer，如果需要独立协程，可以在中间件（CallChain）中设置.
** kcp 支持 - io层
[[./example/kcp][kcp例子-仅在gotcp例子基础上添加了以下选项配置修改]]
因为kcp支持go net包接口，所以使用kcp,只需要修改gotcp包option选项即可。
#+begin_src go
// 客户端选项
WithClientOptionsDialer(kcp.GoTCPClientOptionDialer)
// 服务器选项
server.WithListen(kcp.GoTCPServerOptionListen)
#+end_src
