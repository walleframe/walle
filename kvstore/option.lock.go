// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n LockOption -f Lock -o option.lock.go"
// Version: 0.0.4

package kvstore

import (
	"time"
)

var _ = walleStoreLock()

// LockOptions contains optional request parameters
// TODO: Lock选项合理化配置以及生效
type LockOptions struct {
	// Value  Optional, value to associate with the lock
	Value []byte
	// TTL Optional, expiration ttl associated with the lock
	TTL time.Duration
	// RenewLock Optional, chan used to control and stop the session ttl renewal for the lock
	RenewLock chan struct{}
}

// Value  Optional, value to associate with the lock
func WithLockOptionValue(v []byte) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.Value
		cc.Value = v
		return WithLockOptionValue(previous)
	}
}

// TTL Optional, expiration ttl associated with the lock
func WithLockOptionTTL(v time.Duration) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.TTL
		cc.TTL = v
		return WithLockOptionTTL(previous)
	}
}

// RenewLock Optional, chan used to control and stop the session ttl renewal for the lock
func WithLockOptionRenewLock(v chan struct{}) LockOption {
	return func(cc *LockOptions) LockOption {
		previous := cc.RenewLock
		cc.RenewLock = v
		return WithLockOptionRenewLock(previous)
	}
}

// SetOption modify options
func (cc *LockOptions) SetOption(opt LockOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *LockOptions) ApplyOption(opts ...LockOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *LockOptions) GetSetOption(opt LockOption) LockOption {
	return opt(cc)
}

// LockOption option define
type LockOption func(cc *LockOptions) LockOption

// NewLockOptions create options instance.
func NewLockOptions(opts ...LockOption) *LockOptions {
	cc := newDefaultLockOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogLockOptions != nil {
		watchDogLockOptions(cc)
	}
	return cc
}

// InstallLockOptionsWatchDog install watch dog
func InstallLockOptionsWatchDog(dog func(cc *LockOptions)) {
	watchDogLockOptions = dog
}

var watchDogLockOptions func(cc *LockOptions)

// newDefaultLockOptions new option with default value
func newDefaultLockOptions() *LockOptions {
	cc := &LockOptions{
		Value:     nil,
		TTL:       0,
		RenewLock: nil,
	}
	return cc
}
