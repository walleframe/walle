// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n WriteOption -f Write -o option.write.go"
// Version: 0.0.4

package kvstore

import (
	"time"
)

var _ = walleStoreWrite()

// WriteOptions contains optional request parameters
// TODO: Write选项合理化配置以及生效
type WriteOptions struct {
	IsDir bool
	TTL   time.Duration
}

func WithWriteOptionIsDir(v bool) WriteOption {
	return func(cc *WriteOptions) WriteOption {
		previous := cc.IsDir
		cc.IsDir = v
		return WithWriteOptionIsDir(previous)
	}
}

func WithWriteOptionTTL(v time.Duration) WriteOption {
	return func(cc *WriteOptions) WriteOption {
		previous := cc.TTL
		cc.TTL = v
		return WithWriteOptionTTL(previous)
	}
}

// SetOption modify options
func (cc *WriteOptions) SetOption(opt WriteOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *WriteOptions) ApplyOption(opts ...WriteOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *WriteOptions) GetSetOption(opt WriteOption) WriteOption {
	return opt(cc)
}

// WriteOption option define
type WriteOption func(cc *WriteOptions) WriteOption

// NewWriteOptions create options instance.
func NewWriteOptions(opts ...WriteOption) *WriteOptions {
	cc := newDefaultWriteOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogWriteOptions != nil {
		watchDogWriteOptions(cc)
	}
	return cc
}

// InstallWriteOptionsWatchDog install watch dog
func InstallWriteOptionsWatchDog(dog func(cc *WriteOptions)) {
	watchDogWriteOptions = dog
}

var watchDogWriteOptions func(cc *WriteOptions)

// newDefaultWriteOptions new option with default value
func newDefaultWriteOptions() *WriteOptions {
	cc := &WriteOptions{
		IsDir: false,
		TTL:   0,
	}
	return cc
}
