// Code generated by MockGen. DO NOT EDIT.
// Source: discovery.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	context "context"
	reflect "reflect"

	discovery "github.com/walleframe/walle/network/discovery"
	gomock "github.com/golang/mock/gomock"
)

// MockDiscovery is a mock of Discovery interface.
type MockDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryMockRecorder
}

// MockDiscoveryMockRecorder is the mock recorder for MockDiscovery.
type MockDiscoveryMockRecorder struct {
	mock *MockDiscovery
}

// NewMockDiscovery creates a new mock instance.
func NewMockDiscovery(ctrl *gomock.Controller) *MockDiscovery {
	mock := &MockDiscovery{ctrl: ctrl}
	mock.recorder = &MockDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscovery) EXPECT() *MockDiscoveryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDiscovery) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockDiscoveryMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDiscovery)(nil).Close), ctx)
}

// GetAll mocks base method.
func (m *MockDiscovery) GetAll(ctx context.Context) (discovery.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(discovery.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDiscoveryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDiscovery)(nil).GetAll), ctx)
}

// Watch mocks base method.
func (m *MockDiscovery) Watch(ctx context.Context) (<-chan discovery.Entries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx)
	ret0, _ := ret[0].(<-chan discovery.Entries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockDiscoveryMockRecorder) Watch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDiscovery)(nil).Watch), ctx)
}

// WatchEventNotify mocks base method.
func (m *MockDiscovery) WatchEventNotify(ctx context.Context, eventNotify func(discovery.Entries)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEventNotify", ctx, eventNotify)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchEventNotify indicates an expected call of WatchEventNotify.
func (mr *MockDiscoveryMockRecorder) WatchEventNotify(ctx, eventNotify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEventNotify", reflect.TypeOf((*MockDiscovery)(nil).WatchEventNotify), ctx, eventNotify)
}
