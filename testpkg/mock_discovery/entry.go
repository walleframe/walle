// Code generated by MockGen. DO NOT EDIT.
// Source: entry.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	network "github.com/walleframe/walle/network"
	discovery "github.com/walleframe/walle/network/discovery"
)

// MockEntryCodec is a mock of EntryCodec interface.
type MockEntryCodec struct {
	ctrl     *gomock.Controller
	recorder *MockEntryCodecMockRecorder
}

// MockEntryCodecMockRecorder is the mock recorder for MockEntryCodec.
type MockEntryCodecMockRecorder struct {
	mock *MockEntryCodec
}

// NewMockEntryCodec creates a new mock instance.
func NewMockEntryCodec(ctrl *gomock.Controller) *MockEntryCodec {
	mock := &MockEntryCodec{ctrl: ctrl}
	mock.recorder = &MockEntryCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryCodec) EXPECT() *MockEntryCodecMockRecorder {
	return m.recorder
}

// Mashal mocks base method.
func (m *MockEntryCodec) Mashal(e discovery.Entry) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mashal", e)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Mashal indicates an expected call of Mashal.
func (mr *MockEntryCodecMockRecorder) Mashal(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mashal", reflect.TypeOf((*MockEntryCodec)(nil).Mashal), e)
}

// Unmarshal mocks base method.
func (m *MockEntryCodec) Unmarshal(e discovery.Entry, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", e, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockEntryCodecMockRecorder) Unmarshal(e, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockEntryCodec)(nil).Unmarshal), e, key, value)
}

// MockEntry is a mock of Entry interface.
type MockEntry struct {
	ctrl     *gomock.Controller
	recorder *MockEntryMockRecorder
}

// MockEntryMockRecorder is the mock recorder for MockEntry.
type MockEntryMockRecorder struct {
	mock *MockEntry
}

// NewMockEntry creates a new mock instance.
func NewMockEntry(ctrl *gomock.Controller) *MockEntry {
	mock := &MockEntry{ctrl: ctrl}
	mock.recorder = &MockEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntry) EXPECT() *MockEntryMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockEntry) Address() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Address indicates an expected call of Address.
func (mr *MockEntryMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockEntry)(nil).Address))
}

// BalanceName mocks base method.
func (m *MockEntry) BalanceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BalanceName indicates an expected call of BalanceName.
func (mr *MockEntryMockRecorder) BalanceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceName", reflect.TypeOf((*MockEntry)(nil).BalanceName))
}

// Client mocks base method.
func (m *MockEntry) Client() network.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(network.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockEntryMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockEntry)(nil).Client))
}

// Equals mocks base method.
func (m *MockEntry) Equals(arg0 discovery.Entry) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equals", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equals indicates an expected call of Equals.
func (mr *MockEntryMockRecorder) Equals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equals", reflect.TypeOf((*MockEntry)(nil).Equals), arg0)
}

// Metadata mocks base method.
func (m *MockEntry) Metadata(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockEntryMockRecorder) Metadata(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockEntry)(nil).Metadata), key)
}

// ModifyState mocks base method.
func (m *MockEntry) ModifyState(state discovery.EntryState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyState", state)
}

// ModifyState indicates an expected call of ModifyState.
func (mr *MockEntryMockRecorder) ModifyState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyState", reflect.TypeOf((*MockEntry)(nil).ModifyState), state)
}

// SetClient mocks base method.
func (m *MockEntry) SetClient(arg0 network.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockEntryMockRecorder) SetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockEntry)(nil).SetClient), arg0)
}

// State mocks base method.
func (m *MockEntry) State() discovery.EntryState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(discovery.EntryState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockEntryMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockEntry)(nil).State))
}

// String mocks base method.
func (m *MockEntry) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockEntryMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockEntry)(nil).String))
}
