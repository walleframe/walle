// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockRegistry) Clean(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockRegistryMockRecorder) Clean(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockRegistry)(nil).Clean), ctx)
}

// NewEntry mocks base method.
func (m *MockRegistry) NewEntry(ctx context.Context, addr net.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEntry", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEntry indicates an expected call of NewEntry.
func (mr *MockRegistryMockRecorder) NewEntry(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEntry", reflect.TypeOf((*MockRegistry)(nil).NewEntry), ctx, addr)
}

// Offline mocks base method.
func (m *MockRegistry) Offline(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offline", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Offline indicates an expected call of Offline.
func (mr *MockRegistryMockRecorder) Offline(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offline", reflect.TypeOf((*MockRegistry)(nil).Offline), ctx)
}

// Online mocks base method.
func (m *MockRegistry) Online(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Online", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Online indicates an expected call of Online.
func (mr *MockRegistryMockRecorder) Online(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Online", reflect.TypeOf((*MockRegistry)(nil).Online), ctx)
}
