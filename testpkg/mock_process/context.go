// Code generated by MockGen. DO NOT EDIT.
// Source: context.gen.go

// Package mock_process is a generated GoMock package.
package mock_process

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	process "github.com/walleframe/walle/process"
	metadata "github.com/walleframe/walle/process/metadata"
	zaplog "github.com/walleframe/walle/zaplog"
	zap "go.uber.org/zap"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockContext)(nil).Abort))
}

// Bind mocks base method.
func (m *MockContext) Bind(body interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockContextMockRecorder) Bind(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockContext)(nil).Bind), body)
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
}

// GetReqeustMD mocks base method.
func (m *MockContext) GetReqeustMD() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqeustMD")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReqeustMD indicates an expected call of GetReqeustMD.
func (mr *MockContextMockRecorder) GetReqeustMD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqeustMD", reflect.TypeOf((*MockContext)(nil).GetReqeustMD))
}

// GetRequestPacket mocks base method.
func (m *MockContext) GetRequestPacket() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestPacket")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetRequestPacket indicates an expected call of GetRequestPacket.
func (mr *MockContextMockRecorder) GetRequestPacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestPacket", reflect.TypeOf((*MockContext)(nil).GetRequestPacket))
}

// Logger mocks base method.
func (m *MockContext) Logger() *zaplog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zaplog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockContext)(nil).Logger))
}

// NewEntry mocks base method.
func (m *MockContext) NewEntry(funcName string) *zaplog.LogEntities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEntry", funcName)
	ret0, _ := ret[0].(*zaplog.LogEntities)
	return ret0
}

// NewEntry indicates an expected call of NewEntry.
func (mr *MockContextMockRecorder) NewEntry(funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEntry", reflect.TypeOf((*MockContext)(nil).NewEntry), funcName)
}

// Next mocks base method.
func (m *MockContext) Next(nctx process.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next", nctx)
}

// Next indicates an expected call of Next.
func (mr *MockContextMockRecorder) Next(nctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockContext)(nil).Next), nctx)
}

// Respond mocks base method.
func (m *MockContext) Respond(arg0 context.Context, body interface{}, md metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond", arg0, body, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockContextMockRecorder) Respond(arg0, body, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockContext)(nil).Respond), arg0, body, md)
}

// Value mocks base method.
func (m *MockContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), key)
}

// WithCancel mocks base method.
func (m *MockContext) WithCancel() (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCancel")
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithCancel indicates an expected call of WithCancel.
func (mr *MockContextMockRecorder) WithCancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCancel", reflect.TypeOf((*MockContext)(nil).WithCancel))
}

// WithDeadline mocks base method.
func (m *MockContext) WithDeadline(d time.Time) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDeadline", d)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithDeadline indicates an expected call of WithDeadline.
func (mr *MockContextMockRecorder) WithDeadline(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeadline", reflect.TypeOf((*MockContext)(nil).WithDeadline), d)
}

// WithLogFields mocks base method.
func (m *MockContext) WithLogFields(fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WithLogFields", varargs...)
}

// WithLogFields indicates an expected call of WithLogFields.
func (mr *MockContextMockRecorder) WithLogFields(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogFields", reflect.TypeOf((*MockContext)(nil).WithLogFields), fields...)
}

// WithTimeout mocks base method.
func (m *MockContext) WithTimeout(timeout time.Duration) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", timeout)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockContextMockRecorder) WithTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockContext)(nil).WithTimeout), timeout)
}

// WithValue mocks base method.
func (m *MockContext) WithValue(key, value interface{}) process.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithValue", key, value)
	ret0, _ := ret[0].(process.Context)
	return ret0
}

// WithValue indicates an expected call of WithValue.
func (mr *MockContextMockRecorder) WithValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValue", reflect.TypeOf((*MockContext)(nil).WithValue), key, value)
}
