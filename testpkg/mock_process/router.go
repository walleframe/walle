// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mock_process is a generated GoMock package.
package mock_process

import (
	reflect "reflect"

	process "github.com/walleframe/walle/process"
	gomock "github.com/golang/mock/gomock"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// GetHandlers mocks base method.
func (m *MockRouter) GetHandlers(p interface{}) ([]process.RouterFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandlers", p)
	ret0, _ := ret[0].([]process.RouterFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandlers indicates an expected call of GetHandlers.
func (mr *MockRouterMockRecorder) GetHandlers(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandlers", reflect.TypeOf((*MockRouter)(nil).GetHandlers), p)
}

// NoRouter mocks base method.
func (m *MockRouter) NoRouter(rf process.RouterFunc, mid ...process.MiddlewareFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{rf}
	for _, a := range mid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoRouter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// NoRouter indicates an expected call of NoRouter.
func (mr *MockRouterMockRecorder) NoRouter(rf interface{}, mid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{rf}, mid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRouter", reflect.TypeOf((*MockRouter)(nil).NoRouter), varargs...)
}

// Register mocks base method.
func (m_2 *MockRouter) Register(uri interface{}, rf process.RouterFunc, m ...process.MiddlewareFunc) error {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{uri, rf}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Register", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRouterMockRecorder) Register(uri, rf interface{}, m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uri, rf}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRouter)(nil).Register), varargs...)
}

// Use mocks base method.
func (m_2 *MockRouter) Use(m ...process.MiddlewareFunc) {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	m_2.ctrl.Call(m_2, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockRouterMockRecorder) Use(m ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouter)(nil).Use), m...)
}
