// Code generated by MockGen. DO NOT EDIT.
// Source: network.go

// Package mock_network is a generated GoMock package.
package mock_network

import (
	context "context"
	reflect "reflect"
	time "time"

	network "github.com/aggronmagi/walle/network"
	rpc "github.com/aggronmagi/walle/network/rpc"
	process "github.com/aggronmagi/walle/process"
	metadata "github.com/aggronmagi/walle/process/metadata"
	zaplog "github.com/aggronmagi/walle/zaplog"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// AsyncCall mocks base method.
func (m *MockCaller) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockCallerMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockCaller)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Call mocks base method.
func (m *MockCaller) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockCallerMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCaller)(nil).Call), ctx, uri, rq, rs, opts)
}

// Notify mocks base method.
func (m *MockCaller) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockCallerMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockCaller)(nil).Notify), ctx, uri, rq, opts)
}

// MockCallerResponser is a mock of CallerResponser interface.
type MockCallerResponser struct {
	ctrl     *gomock.Controller
	recorder *MockCallerResponserMockRecorder
}

// MockCallerResponserMockRecorder is the mock recorder for MockCallerResponser.
type MockCallerResponserMockRecorder struct {
	mock *MockCallerResponser
}

// NewMockCallerResponser creates a new mock instance.
func NewMockCallerResponser(ctrl *gomock.Controller) *MockCallerResponser {
	mock := &MockCallerResponser{ctrl: ctrl}
	mock.recorder = &MockCallerResponserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallerResponser) EXPECT() *MockCallerResponserMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockCallerResponser) Write(ctx context.Context, payload interface{}, md metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", ctx, payload, md)
}

// Write indicates an expected call of Write.
func (mr *MockCallerResponserMockRecorder) Write(ctx, payload, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCallerResponser)(nil).Write), ctx, payload, md)
}

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// AsyncCall mocks base method.
func (m *MockLink) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockLinkMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockLink)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Call mocks base method.
func (m *MockLink) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockLinkMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockLink)(nil).Call), ctx, uri, rq, rs, opts)
}

// Close mocks base method.
func (m *MockLink) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLinkMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLink)(nil).Close))
}

// Notify mocks base method.
func (m *MockLink) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockLinkMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockLink)(nil).Notify), ctx, uri, rq, opts)
}

// Write mocks base method.
func (m *MockLink) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockLinkMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLink)(nil).Write), p)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockServer) Broadcast(uri, msg interface{}, md metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", uri, msg, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockServerMockRecorder) Broadcast(uri, msg, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockServer)(nil).Broadcast), uri, msg, md)
}

// BroadcastFilter mocks base method.
func (m *MockServer) BroadcastFilter(filter func(network.Session) bool, uri, msg interface{}, md metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastFilter", filter, uri, msg, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastFilter indicates an expected call of BroadcastFilter.
func (mr *MockServerMockRecorder) BroadcastFilter(filter, uri, msg, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastFilter", reflect.TypeOf((*MockServer)(nil).BroadcastFilter), filter, uri, msg, md)
}

// ForEach mocks base method.
func (m *MockServer) ForEach(f func(network.Session)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", f)
}

// ForEach indicates an expected call of ForEach.
func (mr *MockServerMockRecorder) ForEach(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockServer)(nil).ForEach), f)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AddCloseSessionFunc mocks base method.
func (m *MockSession) AddCloseSessionFunc(f func(network.Session)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCloseSessionFunc", f)
}

// AddCloseSessionFunc indicates an expected call of AddCloseSessionFunc.
func (mr *MockSessionMockRecorder) AddCloseSessionFunc(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseSessionFunc", reflect.TypeOf((*MockSession)(nil).AddCloseSessionFunc), f)
}

// AsyncCall mocks base method.
func (m *MockSession) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockSessionMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockSession)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Call mocks base method.
func (m *MockSession) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockSessionMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSession)(nil).Call), ctx, uri, rq, rs, opts)
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// GetConn mocks base method.
func (m *MockSession) GetConn() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockSessionMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockSession)(nil).GetConn))
}

// GetServer mocks base method.
func (m *MockSession) GetServer() network.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(network.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockSessionMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockSession)(nil).GetServer))
}

// Notify mocks base method.
func (m *MockSession) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockSessionMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSession)(nil).Notify), ctx, uri, rq, opts)
}

// SessionValue mocks base method.
func (m *MockSession) SessionValue(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionValue", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SessionValue indicates an expected call of SessionValue.
func (mr *MockSessionMockRecorder) SessionValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionValue", reflect.TypeOf((*MockSession)(nil).SessionValue), key)
}

// WithSessionValue mocks base method.
func (m *MockSession) WithSessionValue(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithSessionValue", key, value)
}

// WithSessionValue indicates an expected call of WithSessionValue.
func (mr *MockSessionMockRecorder) WithSessionValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSessionValue", reflect.TypeOf((*MockSession)(nil).WithSessionValue), key, value)
}

// Write mocks base method.
func (m *MockSession) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSessionMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSession)(nil).Write), p)
}

// MockSessionContext is a mock of SessionContext interface.
type MockSessionContext struct {
	ctrl     *gomock.Controller
	recorder *MockSessionContextMockRecorder
}

// MockSessionContextMockRecorder is the mock recorder for MockSessionContext.
type MockSessionContextMockRecorder struct {
	mock *MockSessionContext
}

// NewMockSessionContext creates a new mock instance.
func NewMockSessionContext(ctrl *gomock.Controller) *MockSessionContext {
	mock := &MockSessionContext{ctrl: ctrl}
	mock.recorder = &MockSessionContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionContext) EXPECT() *MockSessionContextMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockSessionContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockSessionContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockSessionContext)(nil).Abort))
}

// AddCloseSessionFunc mocks base method.
func (m *MockSessionContext) AddCloseSessionFunc(f func(network.Session)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCloseSessionFunc", f)
}

// AddCloseSessionFunc indicates an expected call of AddCloseSessionFunc.
func (mr *MockSessionContextMockRecorder) AddCloseSessionFunc(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseSessionFunc", reflect.TypeOf((*MockSessionContext)(nil).AddCloseSessionFunc), f)
}

// AsyncCall mocks base method.
func (m *MockSessionContext) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockSessionContextMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockSessionContext)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Bind mocks base method.
func (m *MockSessionContext) Bind(body interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockSessionContextMockRecorder) Bind(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockSessionContext)(nil).Bind), body)
}

// Call mocks base method.
func (m *MockSessionContext) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockSessionContextMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSessionContext)(nil).Call), ctx, uri, rq, rs, opts)
}

// Close mocks base method.
func (m *MockSessionContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSessionContext)(nil).Close))
}

// Deadline mocks base method.
func (m *MockSessionContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockSessionContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockSessionContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockSessionContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockSessionContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockSessionContext)(nil).Done))
}

// Err mocks base method.
func (m *MockSessionContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSessionContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSessionContext)(nil).Err))
}

// GetConn mocks base method.
func (m *MockSessionContext) GetConn() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockSessionContextMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockSessionContext)(nil).GetConn))
}

// GetReqeustMD mocks base method.
func (m *MockSessionContext) GetReqeustMD() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqeustMD")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReqeustMD indicates an expected call of GetReqeustMD.
func (mr *MockSessionContextMockRecorder) GetReqeustMD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqeustMD", reflect.TypeOf((*MockSessionContext)(nil).GetReqeustMD))
}

// GetRequestPacket mocks base method.
func (m *MockSessionContext) GetRequestPacket() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestPacket")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetRequestPacket indicates an expected call of GetRequestPacket.
func (mr *MockSessionContextMockRecorder) GetRequestPacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestPacket", reflect.TypeOf((*MockSessionContext)(nil).GetRequestPacket))
}

// GetServer mocks base method.
func (m *MockSessionContext) GetServer() network.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(network.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockSessionContextMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockSessionContext)(nil).GetServer))
}

// Logger mocks base method.
func (m *MockSessionContext) Logger() *zaplog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zaplog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockSessionContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockSessionContext)(nil).Logger))
}

// NewEntry mocks base method.
func (m *MockSessionContext) NewEntry(funcName string) *zaplog.LogEntities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEntry", funcName)
	ret0, _ := ret[0].(*zaplog.LogEntities)
	return ret0
}

// NewEntry indicates an expected call of NewEntry.
func (mr *MockSessionContextMockRecorder) NewEntry(funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEntry", reflect.TypeOf((*MockSessionContext)(nil).NewEntry), funcName)
}

// Next mocks base method.
func (m *MockSessionContext) Next(nctx process.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next", nctx)
}

// Next indicates an expected call of Next.
func (mr *MockSessionContextMockRecorder) Next(nctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSessionContext)(nil).Next), nctx)
}

// Notify mocks base method.
func (m *MockSessionContext) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockSessionContextMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSessionContext)(nil).Notify), ctx, uri, rq, opts)
}

// Respond mocks base method.
func (m *MockSessionContext) Respond(arg0 context.Context, body interface{}, md metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond", arg0, body, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockSessionContextMockRecorder) Respond(arg0, body, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockSessionContext)(nil).Respond), arg0, body, md)
}

// SessionValue mocks base method.
func (m *MockSessionContext) SessionValue(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionValue", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SessionValue indicates an expected call of SessionValue.
func (mr *MockSessionContextMockRecorder) SessionValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionValue", reflect.TypeOf((*MockSessionContext)(nil).SessionValue), key)
}

// Value mocks base method.
func (m *MockSessionContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockSessionContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockSessionContext)(nil).Value), key)
}

// WithCancel mocks base method.
func (m *MockSessionContext) WithCancel() (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCancel")
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithCancel indicates an expected call of WithCancel.
func (mr *MockSessionContextMockRecorder) WithCancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCancel", reflect.TypeOf((*MockSessionContext)(nil).WithCancel))
}

// WithDeadline mocks base method.
func (m *MockSessionContext) WithDeadline(d time.Time) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDeadline", d)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithDeadline indicates an expected call of WithDeadline.
func (mr *MockSessionContextMockRecorder) WithDeadline(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeadline", reflect.TypeOf((*MockSessionContext)(nil).WithDeadline), d)
}

// WithLogFields mocks base method.
func (m *MockSessionContext) WithLogFields(fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WithLogFields", varargs...)
}

// WithLogFields indicates an expected call of WithLogFields.
func (mr *MockSessionContextMockRecorder) WithLogFields(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogFields", reflect.TypeOf((*MockSessionContext)(nil).WithLogFields), fields...)
}

// WithSessionValue mocks base method.
func (m *MockSessionContext) WithSessionValue(key, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithSessionValue", key, value)
}

// WithSessionValue indicates an expected call of WithSessionValue.
func (mr *MockSessionContextMockRecorder) WithSessionValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSessionValue", reflect.TypeOf((*MockSessionContext)(nil).WithSessionValue), key, value)
}

// WithTimeout mocks base method.
func (m *MockSessionContext) WithTimeout(timeout time.Duration) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", timeout)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockSessionContextMockRecorder) WithTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockSessionContext)(nil).WithTimeout), timeout)
}

// WithValue mocks base method.
func (m *MockSessionContext) WithValue(key, value interface{}) process.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithValue", key, value)
	ret0, _ := ret[0].(process.Context)
	return ret0
}

// WithValue indicates an expected call of WithValue.
func (mr *MockSessionContextMockRecorder) WithValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValue", reflect.TypeOf((*MockSessionContext)(nil).WithValue), key, value)
}

// Write mocks base method.
func (m *MockSessionContext) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSessionContextMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSessionContext)(nil).Write), p)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddCloseClientFunc mocks base method.
func (m *MockClient) AddCloseClientFunc(f func(network.Client)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCloseClientFunc", f)
}

// AddCloseClientFunc indicates an expected call of AddCloseClientFunc.
func (mr *MockClientMockRecorder) AddCloseClientFunc(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseClientFunc", reflect.TypeOf((*MockClient)(nil).AddCloseClientFunc), f)
}

// AsyncCall mocks base method.
func (m *MockClient) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockClientMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockClient)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Call mocks base method.
func (m *MockClient) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockClientMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), ctx, uri, rq, rs, opts)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Notify mocks base method.
func (m *MockClient) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockClientMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockClient)(nil).Notify), ctx, uri, rq, opts)
}

// Write mocks base method.
func (m *MockClient) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockClientMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClient)(nil).Write), p)
}

// MockClientContext is a mock of ClientContext interface.
type MockClientContext struct {
	ctrl     *gomock.Controller
	recorder *MockClientContextMockRecorder
}

// MockClientContextMockRecorder is the mock recorder for MockClientContext.
type MockClientContextMockRecorder struct {
	mock *MockClientContext
}

// NewMockClientContext creates a new mock instance.
func NewMockClientContext(ctrl *gomock.Controller) *MockClientContext {
	mock := &MockClientContext{ctrl: ctrl}
	mock.recorder = &MockClientContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientContext) EXPECT() *MockClientContextMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockClientContext) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockClientContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockClientContext)(nil).Abort))
}

// AsyncCall mocks base method.
func (m *MockClientContext) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockClientContextMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockClientContext)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Bind mocks base method.
func (m *MockClientContext) Bind(body interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockClientContextMockRecorder) Bind(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockClientContext)(nil).Bind), body)
}

// Call mocks base method.
func (m *MockClientContext) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockClientContextMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClientContext)(nil).Call), ctx, uri, rq, rs, opts)
}

// Close mocks base method.
func (m *MockClientContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientContext)(nil).Close))
}

// Deadline mocks base method.
func (m *MockClientContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockClientContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockClientContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockClientContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockClientContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockClientContext)(nil).Done))
}

// Err mocks base method.
func (m *MockClientContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockClientContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockClientContext)(nil).Err))
}

// GetReqeustMD mocks base method.
func (m *MockClientContext) GetReqeustMD() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqeustMD")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReqeustMD indicates an expected call of GetReqeustMD.
func (mr *MockClientContextMockRecorder) GetReqeustMD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqeustMD", reflect.TypeOf((*MockClientContext)(nil).GetReqeustMD))
}

// GetRequestPacket mocks base method.
func (m *MockClientContext) GetRequestPacket() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestPacket")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetRequestPacket indicates an expected call of GetRequestPacket.
func (mr *MockClientContextMockRecorder) GetRequestPacket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestPacket", reflect.TypeOf((*MockClientContext)(nil).GetRequestPacket))
}

// Logger mocks base method.
func (m *MockClientContext) Logger() *zaplog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zaplog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockClientContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockClientContext)(nil).Logger))
}

// NewEntry mocks base method.
func (m *MockClientContext) NewEntry(funcName string) *zaplog.LogEntities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEntry", funcName)
	ret0, _ := ret[0].(*zaplog.LogEntities)
	return ret0
}

// NewEntry indicates an expected call of NewEntry.
func (mr *MockClientContextMockRecorder) NewEntry(funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEntry", reflect.TypeOf((*MockClientContext)(nil).NewEntry), funcName)
}

// Next mocks base method.
func (m *MockClientContext) Next(nctx process.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next", nctx)
}

// Next indicates an expected call of Next.
func (mr *MockClientContextMockRecorder) Next(nctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockClientContext)(nil).Next), nctx)
}

// Notify mocks base method.
func (m *MockClientContext) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockClientContextMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockClientContext)(nil).Notify), ctx, uri, rq, opts)
}

// Respond mocks base method.
func (m *MockClientContext) Respond(arg0 context.Context, body interface{}, md metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond", arg0, body, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockClientContextMockRecorder) Respond(arg0, body, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockClientContext)(nil).Respond), arg0, body, md)
}

// Value mocks base method.
func (m *MockClientContext) Value(key interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockClientContextMockRecorder) Value(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockClientContext)(nil).Value), key)
}

// WithCancel mocks base method.
func (m *MockClientContext) WithCancel() (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCancel")
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithCancel indicates an expected call of WithCancel.
func (mr *MockClientContextMockRecorder) WithCancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCancel", reflect.TypeOf((*MockClientContext)(nil).WithCancel))
}

// WithDeadline mocks base method.
func (m *MockClientContext) WithDeadline(d time.Time) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDeadline", d)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithDeadline indicates an expected call of WithDeadline.
func (mr *MockClientContextMockRecorder) WithDeadline(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeadline", reflect.TypeOf((*MockClientContext)(nil).WithDeadline), d)
}

// WithLogFields mocks base method.
func (m *MockClientContext) WithLogFields(fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WithLogFields", varargs...)
}

// WithLogFields indicates an expected call of WithLogFields.
func (mr *MockClientContextMockRecorder) WithLogFields(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogFields", reflect.TypeOf((*MockClientContext)(nil).WithLogFields), fields...)
}

// WithTimeout mocks base method.
func (m *MockClientContext) WithTimeout(timeout time.Duration) (process.Context, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", timeout)
	ret0, _ := ret[0].(process.Context)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockClientContextMockRecorder) WithTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockClientContext)(nil).WithTimeout), timeout)
}

// WithValue mocks base method.
func (m *MockClientContext) WithValue(key, value interface{}) process.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithValue", key, value)
	ret0, _ := ret[0].(process.Context)
	return ret0
}

// WithValue indicates an expected call of WithValue.
func (mr *MockClientContextMockRecorder) WithValue(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValue", reflect.TypeOf((*MockClientContext)(nil).WithValue), key, value)
}

// Write mocks base method.
func (m *MockClientContext) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockClientContextMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClientContext)(nil).Write), p)
}
