// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wpbrpc.proto

package wpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// test message
type TestMsg struct {
	// int value
	V1 int32 `protobuf:"varint,1,opt,name=V1,proto3" json:"V1,omitempty"`
	// string value
	V2 string `protobuf:"bytes,2,opt,name=V2,proto3" json:"V2,omitempty"`
}

func (m *TestMsg) Reset()         { *m = TestMsg{} }
func (m *TestMsg) String() string { return proto.CompactTextString(m) }
func (*TestMsg) ProtoMessage()    {}
func (*TestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{0}
}
func (m *TestMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMsg.Merge(m, src)
}
func (m *TestMsg) XXX_Size() int {
	return m.Size()
}
func (m *TestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TestMsg proto.InternalMessageInfo

func (m *TestMsg) GetV1() int32 {
	if m != nil {
		return m.V1
	}
	return 0
}

func (m *TestMsg) GetV2() string {
	if m != nil {
		return m.V2
	}
	return ""
}

// multiply rq
type MulRq struct {
	// mul a
	A int32 `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	// mul b
	B int32 `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *MulRq) Reset()         { *m = MulRq{} }
func (m *MulRq) String() string { return proto.CompactTextString(m) }
func (*MulRq) ProtoMessage()    {}
func (*MulRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{1}
}
func (m *MulRq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MulRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MulRq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MulRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulRq.Merge(m, src)
}
func (m *MulRq) XXX_Size() int {
	return m.Size()
}
func (m *MulRq) XXX_DiscardUnknown() {
	xxx_messageInfo_MulRq.DiscardUnknown(m)
}

var xxx_messageInfo_MulRq proto.InternalMessageInfo

func (m *MulRq) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *MulRq) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

// multiply result
type MulRs struct {
	// mul result
	R int32 `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *MulRs) Reset()         { *m = MulRs{} }
func (m *MulRs) String() string { return proto.CompactTextString(m) }
func (*MulRs) ProtoMessage()    {}
func (*MulRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{2}
}
func (m *MulRs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MulRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MulRs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MulRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulRs.Merge(m, src)
}
func (m *MulRs) XXX_Size() int {
	return m.Size()
}
func (m *MulRs) XXX_DiscardUnknown() {
	xxx_messageInfo_MulRs.DiscardUnknown(m)
}

var xxx_messageInfo_MulRs proto.InternalMessageInfo

func (m *MulRs) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

// add request
type AddRq struct {
	// add params
	Params []int64 `protobuf:"varint,1,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (m *AddRq) Reset()         { *m = AddRq{} }
func (m *AddRq) String() string { return proto.CompactTextString(m) }
func (*AddRq) ProtoMessage()    {}
func (*AddRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{3}
}
func (m *AddRq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRq.Merge(m, src)
}
func (m *AddRq) XXX_Size() int {
	return m.Size()
}
func (m *AddRq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRq.DiscardUnknown(m)
}

var xxx_messageInfo_AddRq proto.InternalMessageInfo

func (m *AddRq) GetParams() []int64 {
	if m != nil {
		return m.Params
	}
	return nil
}

// add reply
type AddRs struct {
	// add result
	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *AddRs) Reset()         { *m = AddRs{} }
func (m *AddRs) String() string { return proto.CompactTextString(m) }
func (*AddRs) ProtoMessage()    {}
func (*AddRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{4}
}
func (m *AddRs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRs.Merge(m, src)
}
func (m *AddRs) XXX_Size() int {
	return m.Size()
}
func (m *AddRs) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRs.DiscardUnknown(m)
}

var xxx_messageInfo_AddRs proto.InternalMessageInfo

func (m *AddRs) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ANtf struct {
	F1 map[int32]int32 `protobuf:"bytes,1,rep,name=F1,proto3" json:"F1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ANtf) Reset()         { *m = ANtf{} }
func (m *ANtf) String() string { return proto.CompactTextString(m) }
func (*ANtf) ProtoMessage()    {}
func (*ANtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{5}
}
func (m *ANtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ANtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ANtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ANtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ANtf.Merge(m, src)
}
func (m *ANtf) XXX_Size() int {
	return m.Size()
}
func (m *ANtf) XXX_DiscardUnknown() {
	xxx_messageInfo_ANtf.DiscardUnknown(m)
}

var xxx_messageInfo_ANtf proto.InternalMessageInfo

func (m *ANtf) GetF1() map[int32]int32 {
	if m != nil {
		return m.F1
	}
	return nil
}

type BNtf struct {
	F1 *ANtf   `protobuf:"bytes,1,opt,name=F1,proto3" json:"F1,omitempty"`
	F2 []*ANtf `protobuf:"bytes,2,rep,name=F2,proto3" json:"F2,omitempty"`
}

func (m *BNtf) Reset()         { *m = BNtf{} }
func (m *BNtf) String() string { return proto.CompactTextString(m) }
func (*BNtf) ProtoMessage()    {}
func (*BNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_367643ac2ba4fb85, []int{6}
}
func (m *BNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNtf.Merge(m, src)
}
func (m *BNtf) XXX_Size() int {
	return m.Size()
}
func (m *BNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_BNtf.DiscardUnknown(m)
}

var xxx_messageInfo_BNtf proto.InternalMessageInfo

func (m *BNtf) GetF1() *ANtf {
	if m != nil {
		return m.F1
	}
	return nil
}

func (m *BNtf) GetF2() []*ANtf {
	if m != nil {
		return m.F2
	}
	return nil
}

func init() {
	proto.RegisterType((*TestMsg)(nil), "wpb.TestMsg")
	proto.RegisterType((*MulRq)(nil), "wpb.MulRq")
	proto.RegisterType((*MulRs)(nil), "wpb.MulRs")
	proto.RegisterType((*AddRq)(nil), "wpb.AddRq")
	proto.RegisterType((*AddRs)(nil), "wpb.AddRs")
	proto.RegisterType((*ANtf)(nil), "wpb.ANtf")
	proto.RegisterMapType((map[int32]int32)(nil), "wpb.ANtf.F1Entry")
	proto.RegisterType((*BNtf)(nil), "wpb.BNtf")
}

func init() { proto.RegisterFile("wpbrpc.proto", fileDescriptor_367643ac2ba4fb85) }

var fileDescriptor_367643ac2ba4fb85 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x3b, 0x93, 0xa6, 0xa5, 0xa7, 0xe5, 0x72, 0xef, 0x70, 0x95, 0x2a, 0x18, 0xeb, 0xb8,
	0x30, 0x6e, 0x12, 0x12, 0x11, 0x44, 0xdc, 0x24, 0x60, 0x77, 0x15, 0x19, 0x24, 0x0b, 0x57, 0x26,
	0x6d, 0x8c, 0xa5, 0x69, 0x33, 0x4d, 0xa6, 0x86, 0xbe, 0x85, 0x8f, 0xe5, 0xb2, 0x4b, 0x97, 0xd2,
	0xbe, 0x88, 0xcc, 0x24, 0xba, 0x70, 0x37, 0xdf, 0x39, 0xff, 0xf9, 0xff, 0xc3, 0x1c, 0xe8, 0x95,
	0x3c, 0xca, 0xf9, 0xd8, 0xe2, 0x79, 0x26, 0x32, 0xa2, 0x95, 0x3c, 0xa2, 0xe7, 0xd0, 0x7e, 0x88,
	0x0b, 0x31, 0x2a, 0x12, 0xf2, 0x07, 0x70, 0xe0, 0xf4, 0xd1, 0x00, 0x99, 0x3a, 0xc3, 0x81, 0xa3,
	0xd8, 0xed, 0xe3, 0x01, 0x32, 0x3b, 0x0c, 0x07, 0x2e, 0x3d, 0x05, 0x7d, 0xb4, 0x4a, 0xd9, 0x92,
	0xf4, 0x00, 0x79, 0xb5, 0x0e, 0x79, 0x92, 0x7c, 0xa5, 0xd2, 0x19, 0xf2, 0xe9, 0x5e, 0x25, 0x2a,
	0x64, 0x99, 0x7d, 0x8b, 0x18, 0x3d, 0x06, 0xdd, 0x9b, 0x4c, 0xd8, 0x92, 0xec, 0x43, 0xeb, 0x3e,
	0xcc, 0xc3, 0x79, 0xd1, 0x47, 0x03, 0xcd, 0xd4, 0x58, 0x4d, 0xf4, 0xa8, 0x12, 0x14, 0xe4, 0x3f,
	0xe8, 0x41, 0x98, 0xae, 0x62, 0x35, 0xab, 0xb1, 0x0a, 0xe8, 0x13, 0x34, 0xbd, 0x3b, 0xf1, 0x4c,
	0x4e, 0x00, 0x0f, 0x1d, 0x35, 0xda, 0x75, 0xff, 0x59, 0x25, 0x8f, 0x2c, 0x59, 0xb6, 0x86, 0xce,
	0xed, 0x42, 0xe4, 0x6b, 0x86, 0x87, 0xce, 0xe1, 0x25, 0xb4, 0x6b, 0x24, 0x7f, 0x41, 0x9b, 0xc5,
	0xeb, 0x7a, 0x0b, 0xf9, 0x94, 0xee, 0xaf, 0xca, 0xbd, 0x5a, 0xb8, 0x82, 0x6b, 0x7c, 0x85, 0xe8,
	0x0d, 0x34, 0x7d, 0x99, 0x70, 0x50, 0x27, 0x20, 0xb3, 0xeb, 0x76, 0x7e, 0x12, 0xa4, 0xb3, 0x6a,
	0xc9, 0x0f, 0xd1, 0x7e, 0xb7, 0x5c, 0xdf, 0x7b, 0xdf, 0x1a, 0x68, 0xb3, 0x35, 0xd0, 0xe7, 0xd6,
	0x40, 0x6f, 0x3b, 0xa3, 0xb1, 0xd9, 0x19, 0x8d, 0x8f, 0x9d, 0xd1, 0x78, 0x3c, 0x4b, 0xa6, 0xe2,
	0x65, 0x15, 0x59, 0xe3, 0x6c, 0x6e, 0x87, 0x49, 0x92, 0x67, 0x8b, 0x79, 0x98, 0x4c, 0xed, 0x32,
	0x4c, 0xd3, 0xd8, 0x16, 0x71, 0x21, 0xf8, 0x2c, 0xb1, 0x4b, 0x1e, 0x45, 0x2d, 0x75, 0x95, 0x8b,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x1e, 0xe8, 0x87, 0xa5, 0x01, 0x00, 0x00,
}

func (m *TestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.V2) > 0 {
		i -= len(m.V2)
		copy(dAtA[i:], m.V2)
		i = encodeVarintWpbrpc(dAtA, i, uint64(len(m.V2)))
		i--
		dAtA[i] = 0x12
	}
	if m.V1 != 0 {
		i = encodeVarintWpbrpc(dAtA, i, uint64(m.V1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MulRq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulRq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MulRq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.B != 0 {
		i = encodeVarintWpbrpc(dAtA, i, uint64(m.B))
		i--
		dAtA[i] = 0x10
	}
	if m.A != 0 {
		i = encodeVarintWpbrpc(dAtA, i, uint64(m.A))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MulRs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulRs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MulRs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.R != 0 {
		i = encodeVarintWpbrpc(dAtA, i, uint64(m.R))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddRq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		dAtA2 := make([]byte, len(m.Params)*10)
		var j1 int
		for _, num1 := range m.Params {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintWpbrpc(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintWpbrpc(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ANtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ANtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ANtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.F1) > 0 {
		for k := range m.F1 {
			v := m.F1[k]
			baseI := i
			i = encodeVarintWpbrpc(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintWpbrpc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintWpbrpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.F2) > 0 {
		for iNdEx := len(m.F2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.F2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWpbrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.F1 != nil {
		{
			size, err := m.F1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWpbrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWpbrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovWpbrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.V1 != 0 {
		n += 1 + sovWpbrpc(uint64(m.V1))
	}
	l = len(m.V2)
	if l > 0 {
		n += 1 + l + sovWpbrpc(uint64(l))
	}
	return n
}

func (m *MulRq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A != 0 {
		n += 1 + sovWpbrpc(uint64(m.A))
	}
	if m.B != 0 {
		n += 1 + sovWpbrpc(uint64(m.B))
	}
	return n
}

func (m *MulRs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.R != 0 {
		n += 1 + sovWpbrpc(uint64(m.R))
	}
	return n
}

func (m *AddRq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		l = 0
		for _, e := range m.Params {
			l += sovWpbrpc(uint64(e))
		}
		n += 1 + sovWpbrpc(uint64(l)) + l
	}
	return n
}

func (m *AddRs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovWpbrpc(uint64(m.Value))
	}
	return n
}

func (m *ANtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.F1) > 0 {
		for k, v := range m.F1 {
			_ = k
			_ = v
			mapEntrySize := 1 + sovWpbrpc(uint64(k)) + 1 + sovWpbrpc(uint64(v))
			n += mapEntrySize + 1 + sovWpbrpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F1 != nil {
		l = m.F1.Size()
		n += 1 + l + sovWpbrpc(uint64(l))
	}
	if len(m.F2) > 0 {
		for _, e := range m.F2 {
			l = e.Size()
			n += 1 + l + sovWpbrpc(uint64(l))
		}
	}
	return n
}

func sovWpbrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWpbrpc(x uint64) (n int) {
	return sovWpbrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V1", wireType)
			}
			m.V1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWpbrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulRq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulRq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulRq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			m.A = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulRs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulRs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulRs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWpbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Params = append(m.Params, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWpbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWpbrpc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWpbrpc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Params) == 0 {
					m.Params = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWpbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Params = append(m.Params, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ANtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ANtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ANtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWpbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F1 == nil {
				m.F1 = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWpbrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWpbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWpbrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWpbrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWpbrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.F1[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWpbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F1 == nil {
				m.F1 = &ANtf{}
			}
			if err := m.F1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWpbrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F2 = append(m.F2, &ANtf{})
			if err := m.F2[len(m.F2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWpbrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWpbrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWpbrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWpbrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWpbrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWpbrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWpbrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWpbrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWpbrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWpbrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWpbrpc = fmt.Errorf("proto: unexpected end of group")
)
