// Code generated by MockGen. DO NOT EDIT.
// Source: rpc_processer.go

// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	context "context"
	reflect "reflect"

	rpc "github.com/walleframe/walle/network/rpc"
	process "github.com/walleframe/walle/process"
	gomock "github.com/golang/mock/gomock"
)

// MockRPCProcesser is a mock of RPCProcesser interface.
type MockRPCProcesser struct {
	ctrl     *gomock.Controller
	recorder *MockRPCProcesserMockRecorder
}

// MockRPCProcesserMockRecorder is the mock recorder for MockRPCProcesser.
type MockRPCProcesserMockRecorder struct {
	mock *MockRPCProcesser
}

// NewMockRPCProcesser creates a new mock instance.
func NewMockRPCProcesser(ctrl *gomock.Controller) *MockRPCProcesser {
	mock := &MockRPCProcesser{ctrl: ctrl}
	mock.recorder = &MockRPCProcesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCProcesser) EXPECT() *MockRPCProcesserMockRecorder {
	return m.recorder
}

// AsyncCall mocks base method.
func (m *MockRPCProcesser) AsyncCall(ctx context.Context, uri, rq interface{}, af process.RouterFunc, opts *rpc.AsyncCallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncCall", ctx, uri, rq, af, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncCall indicates an expected call of AsyncCall.
func (mr *MockRPCProcesserMockRecorder) AsyncCall(ctx, uri, rq, af, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncCall", reflect.TypeOf((*MockRPCProcesser)(nil).AsyncCall), ctx, uri, rq, af, opts)
}

// Call mocks base method.
func (m *MockRPCProcesser) Call(ctx context.Context, uri, rq, rs interface{}, opts *rpc.CallOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, uri, rq, rs, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockRPCProcesserMockRecorder) Call(ctx, uri, rq, rs, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCProcesser)(nil).Call), ctx, uri, rq, rs, opts)
}

// Clean mocks base method.
func (m *MockRPCProcesser) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockRPCProcesserMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockRPCProcesser)(nil).Clean))
}

// Notify mocks base method.
func (m *MockRPCProcesser) Notify(ctx context.Context, uri, rq interface{}, opts *rpc.NoticeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, uri, rq, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockRPCProcesserMockRecorder) Notify(ctx, uri, rq, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockRPCProcesser)(nil).Notify), ctx, uri, rq, opts)
}

// OnReply mocks base method.
func (m *MockRPCProcesser) OnReply(in interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReply", in)
	ret0, _ := ret[0].(bool)
	return ret0
}

// OnReply indicates an expected call of OnReply.
func (mr *MockRPCProcesserMockRecorder) OnReply(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReply", reflect.TypeOf((*MockRPCProcesser)(nil).OnReply), in)
}
