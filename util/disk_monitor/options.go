// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n MonitorOption -o options.go"
// Version: 0.0.4

package disk_monitor

import (
	"time"

	"github.com/walleframe/walle/app"
	"github.com/walleframe/walle/zaplog"
)

var _ = walleMonitorOption()

// MonitorOption use for process
type MonitorOptions struct {
	// log interface
	Logger *zaplog.Logger
	// file ext
	FileExt string
	// monitor file or paths
	Paths []string
	// retry time limit, 0:disable retry
	RetryLimit int
	// retry interval
	RetryInterval time.Duration
	// monitor notify interface
	Notifier DiskNotifier
	// app stopper
	Stoper app.Stoper
}

// log interface
func WithLogger(v *zaplog.Logger) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.Logger
		cc.Logger = v
		return WithLogger(previous)
	}
}

// file ext
func WithFileExt(v string) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.FileExt
		cc.FileExt = v
		return WithFileExt(previous)
	}
}

// monitor file or paths
func WithPaths(v ...string) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.Paths
		cc.Paths = v
		return WithPaths(previous...)
	}
}

// retry time limit, 0:disable retry
func WithRetryLimit(v int) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.RetryLimit
		cc.RetryLimit = v
		return WithRetryLimit(previous)
	}
}

// retry interval
func WithRetryInterval(v time.Duration) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.RetryInterval
		cc.RetryInterval = v
		return WithRetryInterval(previous)
	}
}

// monitor notify interface
func WithNotifier(v DiskNotifier) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.Notifier
		cc.Notifier = v
		return WithNotifier(previous)
	}
}

// app stopper
func WithStoper(v app.Stoper) MonitorOption {
	return func(cc *MonitorOptions) MonitorOption {
		previous := cc.Stoper
		cc.Stoper = v
		return WithStoper(previous)
	}
}

// SetOption modify options
func (cc *MonitorOptions) SetOption(opt MonitorOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *MonitorOptions) ApplyOption(opts ...MonitorOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *MonitorOptions) GetSetOption(opt MonitorOption) MonitorOption {
	return opt(cc)
}

// MonitorOption option define
type MonitorOption func(cc *MonitorOptions) MonitorOption

// NewMonitorOptions create options instance.
func NewMonitorOptions(opts ...MonitorOption) *MonitorOptions {
	cc := newDefaultMonitorOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogMonitorOptions != nil {
		watchDogMonitorOptions(cc)
	}
	return cc
}

// InstallMonitorOptionsWatchDog install watch dog
func InstallMonitorOptionsWatchDog(dog func(cc *MonitorOptions)) {
	watchDogMonitorOptions = dog
}

var watchDogMonitorOptions func(cc *MonitorOptions)

// newDefaultMonitorOptions new option with default value
func newDefaultMonitorOptions() *MonitorOptions {
	cc := &MonitorOptions{
		Logger:        zaplog.GetFrameLogger(),
		FileExt:       "*",
		Paths:         nil,
		RetryLimit:    3,
		RetryInterval: time.Second * 10,
		Notifier:      nil,
		Stoper:        nil,
	}
	return cc
}
